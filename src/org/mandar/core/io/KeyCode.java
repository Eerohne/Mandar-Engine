package org.mandar.core.io;

import java.util.HashMap;

import java.util.HashMap;

import java.util.HashMap;

import java.util.HashMap;

import static org.lwjgl.glfw.GLFW.*;

public enum KeyCode {
    //Keyboard Keys (Numbers)
    KEY_0(GLFW_KEY_0), KEY_1(GLFW_KEY_1), KEY_2(GLFW_KEY_2), KEY_3(GLFW_KEY_3), KEY_4(GLFW_KEY_4), KEY_5(GLFW_KEY_5),
    KEY_6(GLFW_KEY_6), KEY_7(GLFW_KEY_7), KEY_8(GLFW_KEY_8), KEY_9(GLFW_KEY_9),

    //Keyboard Keys (Letters)
    A(GLFW_KEY_A), B(GLFW_KEY_B), C(GLFW_KEY_C), D(GLFW_KEY_D), E(GLFW_KEY_E), F(GLFW_KEY_F), G(GLFW_KEY_G),
    H(GLFW_KEY_H), I(GLFW_KEY_I), J(GLFW_KEY_J), K(GLFW_KEY_K), L(GLFW_KEY_L), M(GLFW_KEY_M), N(GLFW_KEY_N),
    O(GLFW_KEY_O), P(GLFW_KEY_P), Q(GLFW_KEY_Q), R(GLFW_KEY_R), S(GLFW_KEY_S), T(GLFW_KEY_T), U(GLFW_KEY_U),
    V(GLFW_KEY_V), W(GLFW_KEY_W), X(GLFW_KEY_X), Y(GLFW_KEY_Y), Z(GLFW_KEY_Z),

    //Keyboard Keys (Special)
    APOSTROPHE(GLFW_KEY_APOSTROPHE),
    BACKSLASH(GLFW_KEY_BACKSLASH), BACKSPACE(GLFW_KEY_BACKSPACE),
    CAPS_LOCK(GLFW_KEY_CAPS_LOCK), COMMA(GLFW_KEY_COMMA),
    DELETE(GLFW_KEY_DELETE), DOWN(GLFW_KEY_DOWN),
    END(GLFW_KEY_END), ESCAPE(GLFW_KEY_ESCAPE), EQUAL(GLFW_KEY_EQUAL), ENTER(GLFW_KEY_ENTER),
    F1(GLFW_KEY_F1), F2(GLFW_KEY_F2), F3(GLFW_KEY_F3),  F4(GLFW_KEY_F4),  F5(GLFW_KEY_F5), F6(GLFW_KEY_F6),
    F7(GLFW_KEY_F7),  F8(GLFW_KEY_F8),  F9(GLFW_KEY_F9),  F10(GLFW_KEY_F10), F11(GLFW_KEY_F11), F12(GLFW_KEY_F12),
    F13(GLFW_KEY_F13), F14(GLFW_KEY_F14), F15(GLFW_KEY_F15), F16(GLFW_KEY_F16), F17(GLFW_KEY_F17), F18(GLFW_KEY_F18),
    F19(GLFW_KEY_F19), F20(GLFW_KEY_F20), F21(GLFW_KEY_F21), F22(GLFW_KEY_F22), F23(GLFW_KEY_F23), F24(GLFW_KEY_F24),
    F25(GLFW_KEY_F25),
    GRAVE_ACCENT(GLFW_KEY_GRAVE_ACCENT),
    HOME(GLFW_KEY_HOME),
    INSERT(GLFW_KEY_INSERT),
    LAST(GLFW_KEY_LAST), LEFT(GLFW_KEY_LEFT), LEFT_ALT(GLFW_KEY_LEFT_ALT), LEFT_BRACKET(GLFW_KEY_LEFT_BRACKET),
    LEFT_CONTROL(GLFW_KEY_LEFT_CONTROL), LEFT_SHIFT(GLFW_KEY_LEFT_SHIFT), LEFT_SUPER(GLFW_KEY_LEFT_SUPER),
    MENU(GLFW_KEY_MENU), MINUS(GLFW_KEY_MINUS),
    NUM_LOCK(GLFW_KEY_NUM_LOCK),
    NUMPAD_0(GLFW_KEY_KP_0), NUMPAD_1(GLFW_KEY_KP_1), NUMPAD_2(GLFW_KEY_KP_2), NUMPAD_3(GLFW_KEY_KP_3),
    NUMPAD_4(GLFW_KEY_KP_4), NUMPAD_5(GLFW_KEY_KP_5), NUMPAD_6(GLFW_KEY_KP_6), NUMPAD_7(GLFW_KEY_KP_7),
    NUMPAD_8(GLFW_KEY_KP_8), NUMPAD_9(GLFW_KEY_KP_9),
    NUMPAD_ADD(GLFW_KEY_KP_ADD), NUMPAD_DECIMAL(GLFW_KEY_KP_DECIMAL), NUMPAD_DIVIDE(GLFW_KEY_KP_DIVIDE),
    NUMPAD_ENTER(GLFW_KEY_KP_ENTER), NUMPAD_EQUAL(GLFW_KEY_KP_EQUAL), NUMPAD_MULTIPLY(GLFW_KEY_KP_MULTIPLY),
    NUMPAD_SUBSTRACT(GLFW_KEY_KP_SUBTRACT),
    PAGE_UP(GLFW_KEY_PAGE_UP), PAGE_DOWN(GLFW_KEY_PAGE_DOWN), PAUSE(GLFW_KEY_PAUSE), PERIOD(GLFW_KEY_PERIOD),
    PRINT_SCREEN(GLFW_KEY_PRINT_SCREEN),
    RIGHT(GLFW_KEY_RIGHT), RIGHT_ALT(GLFW_KEY_RIGHT_ALT), RIGHT_BRACKET(GLFW_KEY_RIGHT_BRACKET),
    RICHT_CONTROL(GLFW_KEY_RIGHT_CONTROL), RIGHT_SHIFT(GLFW_KEY_RIGHT_SHIFT), RIGHT_SUPER(GLFW_KEY_RIGHT_SUPER),
    SCROLL_LOCK(GLFW_KEY_SCROLL_LOCK), SEMICOLON(GLFW_KEY_SEMICOLON), SLASH(GLFW_KEY_SLASH), SPACE(GLFW_KEY_SPACE),
    TAB(GLFW_KEY_TAB), UNKNOWN(GLFW_KEY_UNKNOWN), UP(GLFW_KEY_UP),
    WORLD_1(GLFW_KEY_WORLD_1), WORLD_2(GLFW_KEY_WORLD_2),

    //Mouse Keys
    MOUSE_LEFT(GLFW_MOUSE_BUTTON_LEFT), MOUSE_RIGHT(GLFW_MOUSE_BUTTON_RIGHT), MOUSE_MIDDLE(GLFW_MOUSE_BUTTON_MIDDLE),
    MOUSE_LAST(GLFW_MOUSE_BUTTON_LAST),
    MOUSE_BUTTON_1(GLFW_MOUSE_BUTTON_1), MOUSE_BUTTON_2(GLFW_MOUSE_BUTTON_2), MOUSE_BUTTON_3(GLFW_MOUSE_BUTTON_3),
    MOUSE_BUTTON_4(GLFW_MOUSE_BUTTON_4), MOUSE_BUTTON_5(GLFW_MOUSE_BUTTON_5), MOUSE_BUTTON_6(GLFW_MOUSE_BUTTON_6),
    MOUSE_BUTTON_7(GLFW_MOUSE_BUTTON_7), MOUSE_BUTTON_8(GLFW_MOUSE_BUTTON_8),
    ;

    //Setup KeyCode Abstraction
    private final int keyCode;

    KeyCode(int keyCode){
        this.keyCode = keyCode;
    }

    public int getKeyCode() {
        return keyCode;
    }

    private static final HashMap<Integer, KeyCode> keycodes = buildKeyMap();

    //gets a key based on it's number
    public static KeyCode getKey(int keyValue)
    {
        return keycodes.get(keyValue);
    }

    private static HashMap<Integer, KeyCode> buildKeyMap()
    {
        HashMap<Integer, KeyCode> map = new HashMap<>();
        for(KeyCode k: values())
        {
            map.put(k.keyCode, k);
        }
        return map;
    }
}
